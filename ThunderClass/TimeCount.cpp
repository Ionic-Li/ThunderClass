/*************************************************************************
【文件名】                 TimeCount.cpp
【功能模块和目的】         TimeCount类函数的定义
【开发者及日期】           李永健 2020/6/17
【更改记录】               无
*************************************************************************/
#include "TimeCount.h"

/*************************************************************************
【函数名称】       构造函数
【函数功能】       类内数据初始化
【参数】           在课堂的时长和专注时长
【返回值】         无
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
TimeCount::TimeCount(int TimeInClass, int TimeFocused)
	: Data(m_iData)
{
	m_iData[0] = TimeInClass;
	m_iData[1] = TimeFocused;
}

/*************************************************************************
【函数名称】       构造函数
【函数功能】       类内数据初始化
【参数】           时间数组
【返回值】         无
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
TimeCount::TimeCount(const int* dat)
	: Data(m_iData)
{
	m_iData[0] = dat[0];
	m_iData[1] = dat[1];
}

/*************************************************************************
【函数名称】       拷贝构造函数
【函数功能】       初始化时对象的拷贝
【参数】           TimeCount类对象的常引用
【返回值】         无
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
TimeCount::TimeCount(const TimeCount& data)
	: Data(m_iData)
{
	m_iData[0] = data.m_iData[0];
	m_iData[1] = data.m_iData[1];
}

/*************************************************************************
【函数名称】       析构函数
【函数功能】       对象清理
【参数】           无
【返回值】         无
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
TimeCount::~TimeCount()
{

}

/*************************************************************************
【函数名称】       赋值运算符重载
【函数功能】       对象的赋值
【参数】           TimeCount类对象的常引用
【返回值】         this指针指向的对象
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
TimeCount& TimeCount::operator=(const TimeCount& data)
{
	if (&data != this)
	{
		m_iData[0] = data.m_iData[0];
		m_iData[1] = data.m_iData[1];
	}
	return *this;
}

/*************************************************************************
【函数名称】       SetTimeInClass
【函数功能】       设置在课堂时间
【参数】           毫秒数
【返回值】         无
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
void TimeCount::SetTimeInClass(int iMilliSecond)
{
	m_iData[0] = iMilliSecond;
}

/*************************************************************************
【函数名称】       SetFocusedTime
【函数功能】       设置注意力集中时间
【参数】           毫秒数
【返回值】         无
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
void TimeCount::SetFocusedTime(int iMilliSecond)
{
	m_iData[1] = iMilliSecond;
}

/*************************************************************************
【函数名称】       operator+
【函数功能】       加法运算符重载
【参数】           另一个对象的常引用
【返回值】         TimeCount
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
TimeCount TimeCount::operator+(const TimeCount & CToAdd) const
{
	return TimeCount(m_iData[0] + CToAdd.m_iData[0],
		m_iData[1] + CToAdd.m_iData[1]);
}

/*************************************************************************
【函数名称】       GetFocusedRate
【函数功能】       返回注意力占百分比
【参数】           无
【返回值】         注意力占百分比(整型)
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
int TimeCount::GetFocusedRate() const
{
	float fRate = (m_iData[1] / 1000 * 1.0) / (m_iData[0] / 1000);
	return (fRate * 100);
}

/*************************************************************************
【函数名称】       GetHourInClass
【函数功能】       在课堂时间按照时分秒获取——小时
【参数】           无
【返回值】         小时
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
int TimeCount::GetHourInClass() const
{
	return m_iData[0] / 1000 / 3600;
}

/*************************************************************************
【函数名称】       GetMinInClass
【函数功能】       在课堂时间按照时分秒获取——分钟
【参数】           无
【返回值】         分钟
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
int TimeCount::GetMinInClass() const
{
	return ((m_iData[0] / 1000) % 3600) / 60;
}

/*************************************************************************
【函数名称】       GetSecInClass
【函数功能】       在课堂时间按照时分秒获取——秒
【参数】           无
【返回值】         秒
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
int TimeCount::GetSecInClass() const
{
	return (m_iData[0] / 1000) % 60;
}

/*************************************************************************
【函数名称】       GetHourFocused
【函数功能】       专注时间按照时分秒获取——小时
【参数】           无
【返回值】         小时
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
int TimeCount::GetHourFocused() const
{
	return m_iData[1] / 1000 / 3600;
}

/*************************************************************************
【函数名称】       GetMinFocused
【函数功能】       专注时间按照时分秒获取——分钟
【参数】           无
【返回值】         分钟
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
int TimeCount::GetMinFocused() const
{
	return ((m_iData[1] / 1000) % 3600) / 60;
}

/*************************************************************************
【函数名称】       GetSecFouced
【函数功能】       专注时间按照时分秒获取——秒
【参数】           无
【返回值】         秒
【开发者及日期】   李永健 2020/6/17
【更改记录】       无
*************************************************************************/
int TimeCount::GetSecFocused() const
{
	return (m_iData[1] / 1000) % 60;
}